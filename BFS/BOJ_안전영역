import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;

class dot{
    int x;
    int y;
    dot(int x, int y){
        this.x = x;
        this.y = y;
    }
}

public class Main{
    
	static int n;	//행과 열의 크기
	static int map [][];	//지도
	static boolean visited [][];
	static int maxheight = 1;    //가장 높은 지역의 높이
	static int count = 0;
	static int maxcount = 1;
	
	static int cx [] = {0, 0, 1, -1};
	static int cy [] = {1, -1, 0, 0};
	
	public static void bfsfalse(int x, int y){
		visited[x][y] = true;
		Queue<dot> q = new LinkedList<dot>();
		q.add(new dot(x,y));
		while(!q.isEmpty()){
			dot r = q.remove();
			for(int i=0; i<4; i++){
				int dx = r.x + cx[i];
				int dy = r.y + cy[i];
				
				if(-1<dx && dx<n && -1<dy && dy<n && map[dx][dy]!=0 && !visited[dx][dy]){
					visited[dx][dy] = true;
					q.add(new dot(dx, dy));
				}
			}
		}
	}
	
	public static void bfstrue(int x, int y){
		visited[x][y] = false;
		Queue<dot> q = new LinkedList<dot>();
		q.add(new dot(x,y));
		while(!q.isEmpty()){
			dot r = q.remove();
			for(int i=0; i<4; i++){
				int dx = r.x + cx[i];
				int dy = r.y + cy[i];
				
				if(-1<dx && dx<n && -1<dy && dy<n && map[dx][dy]!=0 && visited[dx][dy]){
					visited[dx][dy] = false;
					q.add(new dot(dx, dy));
				}
			}
		}
	}
    
  public static void main(String[] args){
    Scanner sc = new Scanner(System.in);
		n = sc.nextInt();
		map = new int [n][n];
		visited = new boolean [n][n];
		
		for(int i=0; i<n; i++){
			for(int j=0; j<n; j++){
				map[i][j] = sc.nextInt();
				if(maxheight<map[i][j])
					maxheight = map[i][j];
			}
		}//입력 받는 부분
		
		for(int i=1; i<maxheight; i++){//물의 높이를 1씩 높혀간다
            
			for(int j=0; j<n; j++){
				for(int k=0; k<n; k++){
					if(map[j][k] <= i)
						map[j][k] = 0;
				}
			}//물의 높이에 따라 잠기는 부분 표시
			
			for(int j=0; j<n; j++){
				for(int k=0; k<n; k++){
					if(i%2 == 1){
						if(map[j][k] != 0 && !visited[j][k]){
							bfsfalse(j, k);
							count++;
						}
					}else
						if(map[j][k] !=0 && visited[j][k]){
							bfstrue(j, k);
							count++;
						}
				}
			}

			if(maxcount < count)
				maxcount = count;    //안전지역의 최대값을 갱신한다.
			count = 0;
		}
	
		System.out.println(maxcount);
    }
}
