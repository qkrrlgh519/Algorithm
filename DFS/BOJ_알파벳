import java.util.Scanner;
public class Main{
    
    static int r;
	static int c;
	static char map [][];
	static boolean visited [] = new boolean [26];//알파벳 'A'~'Z'
	static int dx [] = {0, 0, 1, -1};
	static int dy [] = {1, -1, 0, 0};
	static int max = 0;
	static int cnt = 0;
    
    //DFS : 모든 경로의 부분집합 중 가능한 경로의 부분집합을 탐색해서 최대값 도출
	public static void dfs(int x, int y){
		if(max < cnt)
			max = cnt;
		for(int i=0; i<4; i++){
			int cx = x+dx[i];
			int cy = y+dy[i];
			if(0<=cx && cx<r && 0<=cy && cy<c && !visited[map[cx][cy]-65]){
				visited[map[cx][cy]-65] = true;
				cnt++;
				dfs(cx,cy);
				visited[map[cx][cy]-65] = false;
				cnt--;
			}
		}
	}
    
    public static void main(String[] args){
        
        Scanner sc = new Scanner(System.in);
		r = sc.nextInt();
		c = sc.nextInt();
		map = new char [r][c];
		
		for(int i=0; i<r; i++){
			String str = sc.next();
			for(int j=0; j<c; j++){
				map[i][j] = str.charAt(j);
			}
		}//입력 받는 부분
		
		visited[map[0][0]-65] = true;
		cnt = 1;
		dfs(0,0);
		
		System.out.print(max);
	
    }
}
