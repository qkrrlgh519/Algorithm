import java.util.Scanner;
public class Main{

    static int n;
	static int m;
	static int map [][];
	static int copymap [][];
	static boolean visited [][];
	static int blank [][];

	static int cx[] = {0, 0, -1, 1};
	static int cy[] = {1, -1, 0, 0};

	static int max;
	static int count;
	static int comb;

	static void dfs(int x, int y){
		copymap[x][y] = 2;
		visited [x][y] = true;
		for(int i=0; i<4; i++){
			int dx = x + cx[i];
			int dy = y + cy[i];

			if((-1<dx && dx<n) && (-1<dy && dy<m)){
				if((copymap[dx][dy] != 1) && !visited[dx][dy])
					dfs(dx, dy);
			}

		}
	}

    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
		n = sc.nextInt();
		m = sc.nextInt();
		map = new int [n][m];
		copymap = new int [n][m];
		visited = new boolean [n][m];

		max = 0;
		comb = 0;

		for(int i=0; i<n; i++){
			for(int j=0; j<m; j++){
				map[i][j] = sc.nextInt();
				if(map[i][j] == 0)
					comb++;	//지도에서 빈칸의 개수를 샌다.
			}
		}	//입력받는 부분

		blank = new int [comb][2];	//모든 빈칸의 위치를 저장할 배열		
		int index = 0;
		for(int i=0; i<n; i++){
			for(int j=0; j<m; j++){
				if(map[i][j] == 0){
					blank[index][0] = i;
					blank[index][1] = j;
					index++;
				}
			}
		}	//빈칸의 인덱스를 모두 배열에 저장

		for(int i=0; i<comb; i++){
			for(int j=i+1; j<comb; j++){
				for(int k=j+1; k<comb; k++){    //모든 경우 탐색 : 완전 탐색
					count = 0;

					for(int x=0; x<n; x++){
						for(int y=0; y<m; y++){
							copymap[x][y] = map[x][y];
							visited[x][y] = false;
						}	//원본 지도 복사
					}

					copymap[blank[i][0]][blank[i][1]] = 1;
					copymap[blank[j][0]][blank[j][1]] = 1;
					copymap[blank[k][0]][blank[k][1]] = 1;	//벽 3개 설정

					for(int x=0; x<n; x++){
						for(int y=0; y<m; y++){
							if(copymap[x][y] == 2 && !visited[x][y]){
								dfs(x, y);
							}
						}
					}	//바이러스 퍼뜨리기

					for(int x=0; x<n; x++){
						for(int y=0; y<m; y++){
							if(copymap[x][y] == 0)
								count++;
						}
					}	//안전 영역 찾기

					if(max < count)
						max = count;
				}
			}
		}
		System.out.println(max);
    }
}
