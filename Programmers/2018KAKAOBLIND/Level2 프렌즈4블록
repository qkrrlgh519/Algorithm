class Solution {
  public int solution(int m, int n, String[] board) {
      int answer = 0;
      
      String map [][] = new String [m][n];
		
		for(int i=0; i<m; i++){	//행렬에 옮기는 작업
			for(int j=0; j<n; j++){
				map[i][j] = board[i].substring(j, j+1);
			}
		}
		
		while(true){
			int iArr [] = new int [n*m];
			int jArr [] = new int [n*m];
			int index = 0;
			
			boolean flag = true;
			
			for(int i=0; i<m-1; i++){	//찾고
				for(int j=0; j<n-1; j++){
					String temp = map[i][j];
					if(!temp.equals("1") && temp.equals(map[i+1][j])
                       && temp.equals(map[i][j+1]) && temp.equals(map[i+1][j+1])){
						iArr [index] = i;
						jArr [index++] = j;
						flag  = false;
					}
				}
			}
			
			if(flag == true)    //while문 종료 조건은 찾는 과정 중에 4블록을 못 찾을 경우
				break;
			
			for(int i=0; i<index; i++){	//바꾸고
				map[iArr[i]][jArr[i]] = "0";
				map[iArr[i]+1][jArr[i]] = "0";
				map[iArr[i]][jArr[i]+1] = "0";
				map[iArr[i]+1][jArr[i]+1] = "0";	
			}
			
			for(int j=0; j<n; j++){	//이동 하고
				int low = 0;
				for(int i=m-1; i>=0; i--){
					if(map[i][j].equals("0")){
						low++;
						map[i][j] = "1";
					}
					else if(map[i][j].equals("1"))
						continue;
					else{
						if(low > 0){
							map[i+low][j] = map[i][j];
							map[i][j] = "1";
						}
					}
				}
			}
			
		}//while문 종료
		
		for(int i=0; i<m; i++){
			for(int j=0; j<n; j++){
				if(map[i][j].equals("1"))
					answer++;
			}
		}
      
      return answer;
  }
}
